# Cursor Rules for Test Repository

## Project Overview
This is a test repository for experimenting with GitHub features and APIs. The codebase is minimal and focused on learning and experimentation.

## General Guidelines
- Keep code simple and readable for educational purposes
- Add comments to explain complex operations
- Prioritize clarity over cleverness
- Always test changes before committing

## Code Style
### General
- Use 4 spaces for indentation (no tabs)
- Keep line length under 100 characters when possible
- Add blank lines between logical sections of code
- Use meaningful variable and function names

### File Naming
- Use lowercase with hyphens for file names (e.g., `my-script.sh`)
- Use `.md` extension for all markdown files
- Keep file names descriptive but concise

### Languages
#### Bash/Shell Scripts
- Start with appropriate shebang (#!/usr/bin/bash)
- Use set -e for error handling
- Quote variables: "${var}" instead of $var
- Add usage instructions in comments

#### Python (if added)
- Follow PEP 8 style guide
- Use type hints where appropriate
- Include docstrings for functions and classes
- Use virtual environments for dependencies

#### JavaScript/TypeScript (if added)
- Use const/let, avoid var
- Prefer arrow functions for callbacks
- Use async/await over promises when possible
- Include JSDoc comments

## Git Conventions
### Commit Messages
- Use present tense ("Add feature" not "Added feature")
- Keep first line under 50 characters
- Add blank line before detailed description
- Reference issues/PRs when relevant

### Branch Naming
- feature/description-of-feature
- fix/description-of-fix
- docs/description-of-documentation
- test/description-of-test

## Documentation
- Update README.md when adding new features
- Include code examples in documentation
- Keep documentation concise but complete
- Use markdown formatting consistently

## Testing
- Test all changes locally before pushing
- Include test files in a `tests/` directory if applicable
- Document how to run tests in README

## Security
- Never commit sensitive data (passwords, API keys, tokens)
- Use environment variables for configuration
- Add sensitive files to .gitignore

## File Structure
```
test1/
├── .cursorrules      # This file
├── .gitignore        # Git ignore rules
├── README.md         # Project documentation
├── hello.txt         # Sample file
├── scripts/          # Utility scripts (if needed)
├── docs/             # Additional documentation (if needed)
└── tests/            # Test files (if needed)
```

## AI Assistant Behavior
When working in this repository:
1. Always explain changes clearly since this is for learning
2. Suggest best practices when relevant
3. Provide examples when introducing new concepts
4. Keep changes small and focused
5. Prioritize readability and maintainability

## Specific Rules
- When creating new files, always add appropriate headers/comments
- When modifying existing files, preserve the original intent
- Always update relevant documentation after code changes
- Suggest improvements but explain the reasoning
- For experimental code, add "EXPERIMENTAL:" comments

## Dependencies
- Minimize external dependencies
- Document all dependencies clearly
- Use standard library functions when possible
- If adding dependencies, update documentation

## Error Handling
- Always handle potential errors gracefully
- Provide meaningful error messages
- Log errors appropriately
- Never silently fail

Remember: This is a learning repository, so clarity and education are top priorities!